const e=JSON.parse('{"key":"v-1804cb90","path":"/code/language/typescript/%E5%B0%8F%E6%BB%A1TypeScript%E5%9F%BA%E7%A1%80%E6%95%99%E5%AD%A6/07-never%E7%B1%BB%E5%9E%8B.html","title":"07-never类型","lang":"zh-CN","frontmatter":{"title":"07-never类型","updated":"2023-05-13 22:56","description":"TypeScript&nbsp;将使用 never 类型来表示不应该存在的状态(很抽象是不是) 统一规范：后来者，必须按前辈的逻辑套路强制做事，否则报错 由于任何类型都不能赋值给&nbsp;never&nbsp;类型的变量，所以 switch 当存在进入&nbsp;default&nbsp;分支的可能性时，TS 的类型检查会及时帮我们发现这个问题 定义 type bbb = string &amp; number //bbb类型推断为 never ，因为不可能有变量同时为字符串和数字类型","head":[["meta",{"property":"og:url","content":"https://johno666.github.io/code/language/typescript/%E5%B0%8F%E6%BB%A1TypeScript%E5%9F%BA%E7%A1%80%E6%95%99%E5%AD%A6/07-never%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"小阿俊@博客"}],["meta",{"property":"og:title","content":"07-never类型"}],["meta",{"property":"og:description","content":"TypeScript&nbsp;将使用 never 类型来表示不应该存在的状态(很抽象是不是) 统一规范：后来者，必须按前辈的逻辑套路强制做事，否则报错 由于任何类型都不能赋值给&nbsp;never&nbsp;类型的变量，所以 switch 当存在进入&nbsp;default&nbsp;分支的可能性时，TS 的类型检查会及时帮我们发现这个问题 定义 type bbb = string &amp; number //bbb类型推断为 never ，因为不可能有变量同时为字符串和数字类型"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://johno666.github.io/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-19T06:11:13.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"07-never类型"}],["meta",{"property":"article:author","content":"XiaoAjun"}],["meta",{"property":"article:modified_time","content":"2023-09-19T06:11:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"07-never类型\\",\\"image\\":[\\"https://johno666.github.io/\\"],\\"dateModified\\":\\"2023-09-19T06:11:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoAjun\\",\\"url\\":\\"https://johno666.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":2,"title":"never 类型的一个应用场景","slug":"never-类型的一个应用场景","link":"#never-类型的一个应用场景","children":[]}],"git":{"createdTime":1695103873000,"updatedTime":1695103873000,"contributors":[{"name":"张伟竣","email":"2938795170@qq.com","commits":1}]},"readingTime":{"minutes":1.76,"words":527},"filePathRelative":"code/language/typescript/小满TypeScript基础教学/07-never类型.md","localizedDate":"2023年9月19日","excerpt":"<p>TypeScript&nbsp;将使用 never 类型来表示不应该存在的状态(很抽象是不是)</p>\\n<blockquote>\\n<p><mark>统一规范：后来者，必须按前辈的逻辑套路强制做事，否则报错</mark><br>\\n由于任何类型都不能赋值给&nbsp;<code>never</code>&nbsp;类型的变量，所以 <code>switch</code> 当存在进入&nbsp;<code>default</code>&nbsp;分支的可能性时，TS 的类型检查会及时帮我们发现这个问题</p>\\n</blockquote>\\n<h2> 定义</h2>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">type</span> <span class=\\"token class-name\\">bbb</span> <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">string</span> <span class=\\"token operator\\">&amp;</span> <span class=\\"token builtin\\">number</span>\\n<span class=\\"token comment\\">//bbb类型推断为 never ，因为不可能有变量同时为字符串和数字类型</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"XiaoAjun"},"autoDesc":true}');export{e as data};
