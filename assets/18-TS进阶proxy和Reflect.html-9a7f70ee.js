const e=JSON.parse('{"key":"v-ccd8251a","path":"/code/language/typescript/%E5%B0%8F%E6%BB%A1TypeScript%E5%9F%BA%E7%A1%80%E6%95%99%E5%AD%A6/18-TS%E8%BF%9B%E9%98%B6proxy%E5%92%8CReflect.html","title":"18-TS进阶 proxy & Reflect","lang":"zh-CN","frontmatter":{"title":"18-TS进阶 proxy & Reflect","updated":"2023-05-13 22:56","description":"进阶确实有点难，没看懂 学习 proxy 对象代理 vue3 的双向绑定 也是这个原理 Proxy 和 Reflect 是 vue3 实现响应式的基础 es6 的 proxy 代理，vue3 就是用的 ts+proxy 重写底层的 Proxy 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等） target 要使用 Proxy 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。","head":[["meta",{"property":"og:url","content":"https://johno666.github.io/code/language/typescript/%E5%B0%8F%E6%BB%A1TypeScript%E5%9F%BA%E7%A1%80%E6%95%99%E5%AD%A6/18-TS%E8%BF%9B%E9%98%B6proxy%E5%92%8CReflect.html"}],["meta",{"property":"og:site_name","content":"小阿俊@博客"}],["meta",{"property":"og:title","content":"18-TS进阶 proxy & Reflect"}],["meta",{"property":"og:description","content":"进阶确实有点难，没看懂 学习 proxy 对象代理 vue3 的双向绑定 也是这个原理 Proxy 和 Reflect 是 vue3 实现响应式的基础 es6 的 proxy 代理，vue3 就是用的 ts+proxy 重写底层的 Proxy 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等） target 要使用 Proxy 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-19T06:11:13.000Z"}],["meta",{"property":"article:author","content":"XiaoAjun"}],["meta",{"property":"article:modified_time","content":"2023-09-19T06:11:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"18-TS进阶 proxy & Reflect\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-19T06:11:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoAjun\\",\\"url\\":\\"https://johno666.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"学习 proxy 对象代理","slug":"学习-proxy-对象代理","link":"#学习-proxy-对象代理","children":[]},{"level":2,"title":"Reflect","slug":"reflect","link":"#reflect","children":[]},{"level":2,"title":"使用 泛型 + key of 优化","slug":"使用-泛型-key-of-优化","link":"#使用-泛型-key-of-优化","children":[]}],"git":{"createdTime":1695103873000,"updatedTime":1695103873000,"contributors":[{"name":"张伟竣","email":"2938795170@qq.com","commits":1}]},"readingTime":{"minutes":1.8,"words":539},"filePathRelative":"code/language/typescript/小满TypeScript基础教学/18-TS进阶proxy和Reflect.md","localizedDate":"2023年9月19日","excerpt":"<p>进阶确实有点难，没看懂</p>\\n<h2> 学习 proxy 对象代理</h2>\\n<blockquote>\\n<p>vue3 的双向绑定 也是这个原理<br>\\nProxy 和 Reflect 是 vue3 实现响应式的基础<br>\\nes6 的 proxy 代理，vue3 就是用的 ts+proxy 重写底层的</p>\\n</blockquote>\\n<p><code>Proxy</code> 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）</p>\\n<p><code>target</code><br>\\n要使用 Proxy 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。</p>","copyright":{"author":"XiaoAjun"},"autoDesc":true}');export{e as data};
