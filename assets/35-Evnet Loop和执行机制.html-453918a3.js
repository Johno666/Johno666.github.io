const e=JSON.parse('{"key":"v-50a2ed42","path":"/code/vue/vue3/35-Evnet%20Loop%E5%92%8C%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6.html","title":"35-Evnet Loop和执行机制","lang":"zh-CN","frontmatter":{"category":"vue3","title":"35-Evnet Loop和执行机制","updated":"2023-05-13 22:56","description":"JS 执行机制 在我们学 js 的时候都知道 js 是单线程的如果是多线程的话会引发一个问题在同一时间同时操作 DOM 一个增加一个删除 JS 就不知道到底要干嘛了，所以这个语言是单线程的但是随着 HTML5 到来 js 也支持了多线程 webWorker 但是也是不允许操作 DOM 单线程就意味着所有的任务都需要排队，后面的任务需要等前面的任务执行完才能执行，如果前面的任务耗时过长，后面的任务就需要一直等，一些从用户角度上不需要等待的任务就会一直等待，这个从体验角度上来讲是不可接受的，所以 JS 中就出现了异步的概念。 同步任务","head":[["meta",{"property":"og:url","content":"https://johno666.github.io/code/vue/vue3/35-Evnet%20Loop%E5%92%8C%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6.html"}],["meta",{"property":"og:site_name","content":"小阿俊@博客"}],["meta",{"property":"og:title","content":"35-Evnet Loop和执行机制"}],["meta",{"property":"og:description","content":"JS 执行机制 在我们学 js 的时候都知道 js 是单线程的如果是多线程的话会引发一个问题在同一时间同时操作 DOM 一个增加一个删除 JS 就不知道到底要干嘛了，所以这个语言是单线程的但是随着 HTML5 到来 js 也支持了多线程 webWorker 但是也是不允许操作 DOM 单线程就意味着所有的任务都需要排队，后面的任务需要等前面的任务执行完才能执行，如果前面的任务耗时过长，后面的任务就需要一直等，一些从用户角度上不需要等待的任务就会一直等待，这个从体验角度上来讲是不可接受的，所以 JS 中就出现了异步的概念。 同步任务"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://johno666.github.io/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-19T06:11:13.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"35-Evnet Loop和执行机制"}],["meta",{"property":"article:author","content":"XiaoAjun"}],["meta",{"property":"article:modified_time","content":"2023-09-19T06:11:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"35-Evnet Loop和执行机制\\",\\"image\\":[\\"https://johno666.github.io/\\"],\\"dateModified\\":\\"2023-09-19T06:11:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoAjun\\",\\"url\\":\\"https://johno666.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"JS 执行机制","slug":"js-执行机制","link":"#js-执行机制","children":[]},{"level":2,"title":"同步任务","slug":"同步任务","link":"#同步任务","children":[]},{"level":2,"title":"异步任务","slug":"异步任务","link":"#异步任务","children":[{"level":3,"title":"1.宏任务","slug":"_1-宏任务","link":"#_1-宏任务","children":[]},{"level":3,"title":"2.微任务","slug":"_2-微任务","link":"#_2-微任务","children":[]}]}],"git":{"createdTime":1695103873000,"updatedTime":1695103873000,"contributors":[{"name":"张伟竣","email":"2938795170@qq.com","commits":1}]},"readingTime":{"minutes":1.52,"words":456},"filePathRelative":"code/vue/vue3/35-Evnet Loop和执行机制.md","localizedDate":"2023年9月19日","excerpt":"<h2> JS 执行机制</h2>\\n<p>在我们学 js 的时候都知道 js 是单线程的如果是多线程的话会引发一个问题在同一时间同时操作 DOM 一个增加一个删除 JS 就不知道到底要干嘛了，所以这个语言是单线程的但是随着 HTML5 到来 js 也支持了多线程 webWorker 但是也是不允许操作 DOM</p>\\n<p>单线程就意味着所有的任务都需要排队，后面的任务需要等前面的任务执行完才能执行，如果前面的任务耗时过长，后面的任务就需要一直等，一些从用户角度上不需要等待的任务就会一直等待，这个从体验角度上来讲是不可接受的，所以 JS 中就出现了异步的概念。</p>\\n<h2> 同步任务</h2>","copyright":{"author":"XiaoAjun"},"autoDesc":true}');export{e as data};
